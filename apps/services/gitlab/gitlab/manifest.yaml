---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitaly
  namespace: services
  labels:
    app: gitaly
    chart: gitaly-4.11.4
    release: gitlab
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitlab-shell
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: services
  labels:
    app: sidekiq
    chart: sidekiq-4.11.4
    release: gitlab
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      queue-pod-name: all-in-1
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gitlab-webservice-default
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
    gitlab.com/webservice-name: default
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      gitlab.com/webservice-name: default
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitaly
  namespace: services
  labels:
    app: gitaly
    chart: gitaly-4.11.4
    release: gitlab
data:
  configure: |
    set -e
    mkdir -p /init-secrets/gitaly /init-secrets/shell
    cp -v -r -L /init-config/.gitlab_shell_secret  /init-secrets/shell/.gitlab_shell_secret
    cp -v -r -L /init-config/gitaly_token  /init-secrets/gitaly/gitaly_token
  config.toml.erb: |
    # The directory where Gitaly's executables are stored
    bin_dir = "/usr/local/bin"

    # listen on a TCP socket. This is insecure (no authentication)
    listen_addr = "0.0.0.0:8075"

    # Directory where internal sockets reside
    internal_socket_dir = "/home/git"

    # If metrics collection is enabled, inform gitaly about that
    prometheus_listen_addr = "localhost:9236"

    <% @storages = [  "default",  ] %>

    <% @index=`echo ${HOSTNAME##*-}`.to_i %>
    <% if @storages.length > @index %>
    [[storage]]
    name = "<%= @storages[@index] %>"
    path = "/home/git/repositories"
    <% else %>
    <% raise Exception, "Storage for node #{@index} is not present in the storageNames array. Did you use kubectl to scale up? You need to solely use helm for this purpose." %>
    <% end %>

    [logging]
    format = "json"
    dir = "/var/log/gitaly"

    [auth]
    token = "<%= File.read('/etc/gitlab-secrets/gitaly/gitaly_token').strip.dump[1..-2] %>"

    [git]

    [gitaly-ruby]
    # The directory where gitaly-ruby is installed
    dir = "/srv/gitaly-ruby"
    rugged_git_config_search_path = "/usr/local/etc"

    [gitlab-shell]
    # The directory where gitlab-shell is installed
    dir = "/srv/gitlab-shell"

    [gitlab]
    # location of shared secret for GitLab Shell / API interaction
    secret_file = "/etc/gitlab-secrets/shell/.gitlab_shell_secret"
    # URL of API
    url = "http://gitlab-webservice-default.services.svc:8181/"

    [gitlab.http-settings]
    # read_timeout = 300
    # user = someone
    # password = somepass
    # ca_file = /etc/ssl/cert.pem
    # ca_path = /etc/pki/tls/certs
    self_signed_cert = false

    [hooks]
    # directory containing custom hooks
    custom_hooks_dir = "/home/git/custom_hooks"
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-exporter
  namespace: services
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-4.11.4
    release: gitlab
data:
  gitlab-exporter.yml.erb: |
    server:
      name: webrick
      listen_address: 0.0.0.0
      listen_port: 9168

    probes:
      db_common: &db_common
        methods:
          - probe_db
        opts:
          connection_string: dbname=gitlab user=gitlab host=10.0.40.12 port=5432 password='<%= File.read("/etc/gitlab/postgres/psql-password").strip.gsub(/[\'\\]/) { |esc| '\\' + esc } %>'
      database:
        multiple: true
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common
      database_bloat:
        class_name: Database::BloatProber
        <<: *db_common

      sidekiq: &sidekiq
        methods:
          - probe_queues
          - probe_workers
          - probe_retries
          - probe_stats
        opts:
          redis_url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
          redis_enable_client: false

      ruby: &ruby
        methods:
          - probe_gc
        opts:
          quantiles: false

      metrics:
        multiple: true
        ruby:
          <<: *ruby
        sidekiq:
          <<: *sidekiq
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in   ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis postgres ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done


# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap-sshd.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell-sshd
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
data:
  sshd_config: |
    #    $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

    # This is the sshd server system-wide configuration file.  See
    # sshd_config(5) for more information.

    # This sshd was compiled with PATH=/bin:/usr/bin:/sbin:/usr/sbin

    # The strategy used for options in the default sshd_config shipped with
    # OpenSSH is to specify options with their default value where
    # possible, but leave them commented.  Uncommented options override the
    # default value.

    Port 2222
    #AddressFamily any
    #ListenAddress 0.0.0.0
    #ListenAddress ::

    #HostKey /etc/ssh/ssh_host_rsa_key
    #HostKey /etc/ssh/ssh_host_dsa_key
    #HostKey /etc/ssh/ssh_host_ecdsa_key
    #HostKey /etc/ssh/ssh_host_ed25519_key

    # Ciphers and keying
    #RekeyLimit default none

    # Logging
    #SyslogFacility AUTH
    LogLevel ERROR

    # Authentication:

    PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10

    #PubkeyAuthentication yes

    #AuthorizedPrincipalsFile none

    # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
    #HostbasedAuthentication no
    # Change to yes if you don't trust ~/.ssh/known_hosts for
    # HostbasedAuthentication
    #IgnoreUserKnownHosts no
    # Don't read the user's ~/.rhosts and ~/.shosts files
    #IgnoreRhosts yes

    #PermitEmptyPasswords no

    # Change to no to disable s/key passwords
    #ChallengeResponseAuthentication yes

    # Kerberos options
    #KerberosAuthentication no
    #KerberosOrLocalPasswd yes
    #KerberosTicketCleanup yes
    #KerberosGetAFSToken no

    # GSSAPI options
    #GSSAPIAuthentication no
    #GSSAPICleanupCredentials yes

    # Set this to 'yes' to enable PAM authentication, account processing,
    # and session processing. If this is enabled, PAM authentication will
    # be allowed through the ChallengeResponseAuthentication and
    # PasswordAuthentication.  Depending on your PAM configuration,
    # PAM authentication via ChallengeResponseAuthentication may bypass
    # the setting of "PermitRootLogin without-password".
    # If you just want the PAM account and session checks to run without
    # PAM authentication, then enable this but set PasswordAuthentication
    # and ChallengeResponseAuthentication to 'no'.
    #UsePAM no

    #AllowAgentForwarding yes
    #AllowTcpForwarding yes
    #GatewayPorts no
    #X11Forwarding no
    #X11DisplayOffset 10
    #X11UseLocalhost yes
    #PermitTTY yes
    #PrintMotd yes
    #PrintLastLog yes
    #TCPKeepAlive yes
    #UseLogin no
    #PermitUserEnvironment no
    #Compression delayed
    #ClientAliveInterval 0
    #ClientAliveCountMax 3
    #UseDNS no
    PidFile /srv/sshd/sshd.pid
    #PermitTunnel no
    #ChrootDirectory none
    #VersionAddendum none

    # no default banner path
    #Banner none

    # override default of no subsystems
    # Subsystem    sftp    /usr/lib/ssh/sftp-server

    # the following are HPN related configuration options
    # tcp receive buffer polling. disable in non autotuning kernels
    #TcpRcvBufPoll yes

    # disable hpn performance boosts
    #HPNDisabled no

    # buffer size for hpn to non-hpn connections
    #HPNBufferSize 2048

    # Example of overriding settings on a per-user basis
    #Match User anoncvs
    #    X11Forwarding no
    #    AllowTcpForwarding no
    #    PermitTTY no
    #    ForceCommand cvs server

    # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
    # but this is overridden so installations will only check .ssh/authorized_keys
    AuthorizedKeysFile    .ssh/authorized_keys

    AuthorizedKeysCommand /authorized_keys %u %k
    AuthorizedKeysCommandUser git

    PasswordAuthentication no

    AllowUsers git

    # Enable the use of Git protcol v2
    AcceptEnv GIT_PROTOCOL

    # Hard disable all forwarding
    DisableForwarding yes

    # Specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
    # See `man sshd_config(5)`

    MaxStartups 10:30:100

    # Specifies amount of time athat the server will disconnect after if the user has not successfully logged in
    LoginGraceTime 120

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
data:
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in shell ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    mkdir -p /${secret_dir}/ssh
    cp -v -r -L /${config_dir}/ssh_host_* /${secret_dir}/ssh/
    chmod 0400 /${secret_dir}/ssh/ssh_host_*
  config.yml.erb: |
    # GitLab user. git by default
    user: git

    # Url to gitlab instance. Used for api calls. Should end with a slash.
    gitlab_url: "http://gitlab-webservice-default.services.svc:8181/"

    secret_file: /etc/gitlab-secrets/shell/.gitlab_shell_secret

    http_settings:
      self_signed_cert: false

    # File used as authorized_keys for gitlab user
    auth_file: "/home/git/.ssh/authorized_keys"

    # Log file.
    # Default is gitlab-shell.log in the root directory.
    log_file: "/var/log/gitlab-shell/gitlab-shell.log"

    log_format: text

    # Audit usernames.
    # Set to true to see real usernames in the logs instead of key ids, which is easier to follow, but
    # incurs an extra API call on every gitlab-shell command.
    audit_usernames: false


# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-migrations
  namespace: services
  labels:
    app: migrations
    chart: migrations-4.11.4
    release: gitlab
data:
  pages_redirect_uri: https://projects.pages.technolab.cloud/auth
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlab
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "10.0.40.12"
      port: 5432
      connect_timeout:
      application_name:
      prepared_statements: false
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
      adapter: redis
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.technolab.cloud
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.services.svc:8075
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in rails-secrets migrations gitaly ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done


# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap-queue.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq-all-in-1
  namespace: services
  labels:
    app: sidekiq
    chart: sidekiq-4.11.4
    release: gitlab
    queue_pod_name: all-in-1
data:
  sidekiq_queues.yml.erb: |
    <%=
       # this works because codebase default content has only `:
       sq = YAML.load_file('/srv/gitlab/config/sidekiq_queues.yml')
       sq.to_yaml
    %>

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq
  namespace: services
  labels:
    app: sidekiq
    chart: sidekiq-4.11.4
    release: gitlab
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlab
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "10.0.40.12"
      port: 5432
      connect_timeout:
      application_name:
      prepared_statements: false
  smtp_settings.rb: |
    Rails.application.config.action_mailer.delivery_method = :smtp
    ActionMailer::Base.delivery_method = :smtp
    ActionMailer::Base.smtp_settings = {
      address: "mailhog.mailhog.svc.cluster.local",
      port: 1025,
      ca_file: "/etc/ssl/certs/ca-certificates.crt",
      enable_starttls_auto: false,
      openssl_verify_mode: "none"
    }
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
      adapter: redis
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.technolab.cloud
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: false
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern:
        default_theme: 11
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: false
        webhook_timeout:
        trusted_proxies:
        time_zone: "Europe/Berlin"
        email_from: "gitlab@technolab.cloud"
        email_display_name: "GitLab"
        email_reply_to: "noreply@technolab.cloud"
        email_subject_suffix: ""

      cron_jobs:
        expire_build_artifacts_worker:
          cron: 50 * * * *
        pipeline_schedule_worker:
          cron: 19 * * * *
        stuck_ci_jobs_worker:
          cron: 0 * * * *
      gravatar:
        plain_url:
        ssl_url:
      extra:

      # Consolidated object storage configuration
      ## property local configuration will override object_store
      object_store:
        enabled: true
        direct_upload: true
        background_upload: false
        proxy_download: true
        connection: <%= YAML.load_file("/etc/gitlab/objectstorage/object_store").to_json() %>
        objects:
          artifacts:
            bucket: gitlab-artifacts
          lfs:
            bucket: git-lfs
          uploads:
            bucket: gitlab-uploads
          packages:
            bucket: gitlab-packages
          pages:
            bucket: gitlab-pages
      artifacts:
        enabled: true
      lfs:
        enabled: true
      uploads:
        enabled: true
      packages:
        enabled: true
      external_diffs:
        enabled: false
        when:
      terraform_state:
        enabled: false
      dependency_proxy:
        enabled: false
      pseudonymizer:
        manifest: config/pseudonymizer.yml
        upload:
          remote_directory: gitlab-pseudo
      sentry:
        enabled: false
        dsn:
        clientside_dsn:
        environment:
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.technolab.cloud
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: false
        host: registry.technolab.cloud
        api_url: http://gitlab-registry.services.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
      gitlab_ci:
      ldap:
        enabled: false
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.services.svc:8075
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
          enabled: true
          address: 0.0.0.0
          port: 3807
      sidekiq:
        log_format: default
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done


# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/task-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-task-runner
  namespace: services
  labels:
    app: task-runner
    chart: task-runner-4.11.4
    release: gitlab
data:
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlab
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "10.0.40.12"
      port: 5432
      connect_timeout:
      application_name:
      prepared_statements: false
  smtp_settings.rb: |
    Rails.application.config.action_mailer.delivery_method = :smtp
    ActionMailer::Base.delivery_method = :smtp
    ActionMailer::Base.smtp_settings = {
      address: "mailhog.mailhog.svc.cluster.local",
      port: 1025,
      ca_file: "/etc/ssl/certs/ca-certificates.crt",
      enable_starttls_auto: false,
      openssl_verify_mode: "none"
    }
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
      adapter: redis
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.technolab.cloud
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: false
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern:
        default_theme: 11
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: false
        webhook_timeout:
        trusted_proxies:
        time_zone: "Europe/Berlin"
        email_from: "gitlab@technolab.cloud"
        email_display_name: "GitLab"
        email_reply_to: "noreply@technolab.cloud"
        email_subject_suffix: ""

      cron_jobs:
        expire_build_artifacts_worker:
          cron: 50 * * * *
        pipeline_schedule_worker:
          cron: 19 * * * *
        stuck_ci_jobs_worker:
          cron: 0 * * * *
      # Consolidated object storage configuration
      ## property local configuration will override object_store
      object_store:
        enabled: true
        direct_upload: true
        background_upload: false
        proxy_download: true
        connection: <%= YAML.load_file("/etc/gitlab/objectstorage/object_store").to_json() %>
        objects:
          artifacts:
            bucket: gitlab-artifacts
          lfs:
            bucket: git-lfs
          uploads:
            bucket: gitlab-uploads
          packages:
            bucket: gitlab-packages
          pages:
            bucket: gitlab-pages
      artifacts:
        enabled: true
      lfs:
        enabled: true
      uploads:
        enabled: true
      packages:
        enabled: true
      external_diffs:
        enabled: false
        when:
      terraform_state:
        enabled: false
      dependency_proxy:
        enabled: false
      pseudonymizer:
        manifest: config/pseudonymizer.yml
        upload:
          remote_directory: gitlab-pseudo
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.technolab.cloud
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: false
        host: registry.technolab.cloud
        api_url: http://gitlab-registry.services.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
      gitlab_ci:
      ldap:
        enabled: false
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.services.svc:8075
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
      extra:
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in shell gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done

    if [ ! -f "/${secret_dir}/objectstorage/.s3cfg" ]; then
    cat <<EOF > "/${secret_dir}/.s3cfg"
    [default]
    access_key = $(cat /init-secrets/minio/accesskey)
    secret_key = $(cat /init-secrets/minio/secretkey)
    bucket_location = us-east-1
    host_base = 10.0.40.2:9001
    host_bucket = 10.0.40.2:9001/%(bucket)
    default_mime_type = binary/octet-stream
    enable_multipart = True
    multipart_max_chunks = 10000
    multipart_chunk_size_mb = 128
    recursive = True
    recv_chunk = 65536
    send_chunk = 65536
    server_side_encryption = False
    signature_v2 = True
    socket_timeout = 300
    use_mime_magic = False
    verbosity = WARNING
    use_https = False
    website_endpoint = http://10.0.40.2:9001
    EOF
    else
      mv "/${secret_dir}/objectstorage/.s3cfg" "/${secret_dir}/.s3cfg"
    fi
  configure-gsutil: |
    # The following script is used to configure gsutil when creating backups
    # It provides inputs to the `gsutil config -e` prompt as follows:
    # 1) Path to service account JSON key file
    # 2) Do not set permissions for key file
    # 3) GCP Project ID
    # 4) Decline anonymous usage statistics
    printf "$GOOGLE_APPLICATION_CREDENTIALS\nN\n\nN\n" | gsutil config -e
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    production:
      adapter: postgresql
      encoding: unicode
      database: gitlab
      username: gitlab
      password: "<%= File.read("/etc/gitlab/postgres/psql-password").strip.dump[1..-2] %>"
      host: "10.0.40.12"
      port: 5432
      connect_timeout:
      application_name:
      prepared_statements: false
  smtp_settings.rb: |
    Rails.application.config.action_mailer.delivery_method = :smtp
    ActionMailer::Base.delivery_method = :smtp
    ActionMailer::Base.smtp_settings = {
      address: "mailhog.mailhog.svc.cluster.local",
      port: 1025,
      ca_file: "/etc/ssl/certs/ca-certificates.crt",
      enable_starttls_auto: false,
      openssl_verify_mode: "none"
    }
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@redis-headless.redis.svc.cluster.local:6379
      id:
      adapter: redis
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.technolab.cloud
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: false
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern:
        default_theme: 11
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: false
        webhook_timeout:
        trusted_proxies:
        time_zone: "Europe/Berlin"
        email_from: "gitlab@technolab.cloud"
        email_display_name: "GitLab"
        email_reply_to: "noreply@technolab.cloud"
        email_subject_suffix: ""

      cron_jobs:
        expire_build_artifacts_worker:
          cron: 50 * * * *
        pipeline_schedule_worker:
          cron: 19 * * * *
        stuck_ci_jobs_worker:
          cron: 0 * * * *
      gravatar:
        plain_url:
        ssl_url:
      extra:
      # Consolidated object storage configuration
      ## property local configuration will override object_store
      object_store:
        enabled: true
        direct_upload: true
        background_upload: false
        proxy_download: true
        connection: <%= YAML.load_file("/etc/gitlab/objectstorage/object_store").to_json() %>
        objects:
          artifacts:
            bucket: gitlab-artifacts
          lfs:
            bucket: git-lfs
          uploads:
            bucket: gitlab-uploads
          packages:
            bucket: gitlab-packages
          pages:
            bucket: gitlab-pages
      artifacts:
        enabled: true
      lfs:
        enabled: true
      uploads:
        enabled: true
      packages:
        enabled: true
      external_diffs:
        enabled: false
        when:
      terraform_state:
        enabled: false
      dependency_proxy:
        enabled: false
      sentry:
        enabled: false
        dsn:
        clientside_dsn:
        environment:
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.technolab.cloud
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
      mattermost:
        enabled: false
      gitlab_ci:
      ldap:
        enabled: false
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: "<%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.dump[1..-2] %>"
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.services.svc:8075
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        web_exporter:
          enabled: false
          address: 0.0.0.0
          port: 8083
        sidekiq_exporter:
      shutdown:
        blackout_seconds: <%= ENV["SHUTDOWN_BLACKOUT_SECONDS"] %>
      rack_attack:
        git_basic_auth:
      ## Registry Integration
      registry:
        enabled: false
        host: registry.technolab.cloud
        api_url: http://gitlab-registry.services.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
      smartcard:
        enabled: false
        ca_file: '/etc/gitlab/rails-secrets/smartcard-ca.crt'
        client_certificate_required_host: smartcard.technolab.cloud
        client_certificate_required_port: 443
        san_extensions: false
        required_for_git_access: false
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"

    for secret in shell gitaly registry rails-secrets gitlab-workhorse ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-workhorse-config
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.erb: |
    [redis]
    URL = "redis://redis-headless.redis.svc.cluster.local:6379"
    Password = "<%= File.read("/etc/gitlab/redis/redis-password").strip.dump[1..-2] %>"
    <%
      require 'yaml'

      supported_providers = %w(AWS AzureRM)
      provider = ''
      aws_access_key_id = ''
      aws_secret_access_key = ''

      azure_storage_account_name = ''
      azure_storage_access_key = ''

      if File.exists? '/etc/gitlab/minio/accesskey'
        provider = 'AWS'
        aws_access_key_id = File.read('/etc/gitlab/minio/accesskey').strip.dump[1..-2]
        aws_secret_access_key = File.read('/etc/gitlab/minio/secretkey').strip.dump[1..-2]
      end

      if File.exists? '/etc/gitlab/objectstorage/object_store'
        connection = YAML.safe_load(File.read('/etc/gitlab/objectstorage/object_store'))
        provider = connection['provider']
        if connection.has_key? 'aws_access_key_id'
          aws_access_key_id = connection['aws_access_key_id']
          aws_secret_access_key = connection['aws_secret_access_key']
        elsif connection.has_key? 'azure_storage_account_name'
          azure_storage_account_name = connection['azure_storage_account_name']
          azure_storage_access_key = connection['azure_storage_access_key']
        end
      end

      if supported_providers.include? provider
    %>
    [object_storage]
    provider = "<%= provider %>"
    <%   if provider.eql? 'AWS' %>
    # AWS / S3 object storage configuration.
    [object_storage.s3]
    # access/secret can be blank!
    aws_access_key_id = "<%= aws_access_key_id %>"
    aws_secret_access_key = "<%= aws_secret_access_key %>"
    <%   elsif provider.eql? 'AzureRM' %>
    # Azure Blob storage configuration.
    [object_storage.azurerm]
    azure_storage_account_name = "<%= azure_storage_account_name %>"
    azure_storage_access_key = "<%= azure_storage_access_key %>"
    <%
        end
      end
    %>
    [image_resizer]
    max_scaler_procs = 2
    max_filesize = 250000
  configure: |
    set -e
    mkdir -p /init-secrets-workhorse/gitlab-workhorse
    cp -v -r -L /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
    mkdir -p /init-secrets-workhorse/redis
    cp -v -r -L /init-config/redis/redis-password /init-secrets-workhorse/redis/
    if [ -f /init-config/objectstorage/object_store ]; then
      mkdir -p /init-secrets-workhorse/objectstorage
      cp -v -r -L /init-config/objectstorage/object_store /init-secrets-workhorse/objectstorage/
    fi

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/tests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice-tests
  namespace: services
data:
  test_login: |
    set -e
    echo 'Start Test'
    endpoint="https://gitlab.technolab.cloud"
    cookie_read="-c /tmp/test_login.cookie"
    cookie_readwrite="$cookie_read -b /tmp/test_login.cookie"

    signin_url="$endpoint/users/sign_in"
    echo "Login to create a session: $signin_url"
    csrf=$(curl -L $signin_url --fail -s $cookie_read | grep -Po '<meta.*name="csrf-token".*content="\K[a-zA-Z0-9\+=\-\/]*')
    curl -X POST $signin_url -s $cookie_readwrite -F "authenticity_token=$csrf" -F 'user[login]=root' -F "user[password]=$(cat /initial_root_password)"

    profile_url="$endpoint/profile"
    echo "Confirm session valid: $profile_url"
    profile_status=$(curl -L -s -o /tmp/profile_output -w "%{http_code}" $cookie_readwrite $profile_url)

    if [ "$profile_status" != "200" ]; then
      echo "Error: Session Invalid"
      cat /tmp/profile_output
      exit 1
    fi

    echo 'Test Passed'
    exit 0


# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/templates/chart-info.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-chart-info
  namespace: services
  labels:
    app: gitlab
    chart: gitlab-4.11.4
    release: gitlab
data:
  gitlabVersion: "13.11.4"
  gitlabChartVersion: "4.11.4"
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitaly
  namespace: services
  labels:
    app: gitaly
    chart: gitaly-4.11.4
    release: gitlab
  annotations: {}
spec:
  type: ClusterIP
  clusterIP: "None"
  ports:
    - port: 8075
      name: gitaly
      targetPort: 8075
  selector:
    app: gitaly
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-exporter
  namespace: services
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-4.11.4
    release: gitlab
  annotations: {}
spec:
  type: ClusterIP
  ports:
    - port: 9168
      targetPort: 9168
      protocol: TCP
      name: gitlab-exporter
  selector:
    app: gitlab-exporter
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-shell
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
  annotations: {}
spec:
  type: ClusterIP
  ports:
    - port: 22
      targetPort: 2222
      protocol: TCP
      name: ssh
  selector:
    app: gitlab-shell
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-webservice-default
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
    gitlab.com/webservice-name: default
  annotations: {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http-webservice
    - port: 8181
      targetPort: 8181
      protocol: TCP
      name: http-workhorse
  selector:
    app: webservice
    release: gitlab
    gitlab.com/webservice-name: default
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-exporter
  namespace: services
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-4.11.4
    release: gitlab
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-exporter
      release: gitlab
  template:
    metadata:
      labels:
        app: gitlab-exporter
        release: gitlab
        chart: gitlab-exporter-4.11.4
      annotations:
        checksum/config: bd1275738400ccec9dfd1f1c38fa8fc884b0c80abc9f69b5965a03be3e0ad7f9
        gitlab.com/prometheus_path: /metrics
        gitlab.com/prometheus_port: "9168"
        gitlab.com/prometheus_scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "9168"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: gitlab-exporter
                    release: gitlab
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env:
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env:
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /config
              readOnly: true
            - name: init-gitlab-exporter-secrets
              mountPath: /init-config
              readOnly: true
            - name: gitlab-exporter-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      containers:
        - name: gitlab-exporter
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter:10.2.0"
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab-exporter/templates"
            - name: CONFIG_DIRECTORY
              value: "/etc/gitlab-exporter"
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
          ports:
            - containerPort: 9168
              name: gitlab-exporter
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            requests:
              cpu: 75m
              memory: 100M
      volumes:
        - name: gitlab-exporter-config
          configMap:
            name: gitlab-gitlab-exporter
        - name: init-gitlab-exporter-secrets
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "psql-password"
                      path: postgres/psql-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "redis-password"
                      path: redis/redis-password
        - name: gitlab-exporter-secrets
          emptyDir:
            medium: "Memory"
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-shell
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
  annotations: {}
spec:
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
  template:
    metadata:
      labels:
        app: gitlab-shell
        chart: gitlab-shell-4.11.4
        release: gitlab
      annotations:
        checksum/config: bf5fec8630ae2c19f472a11be7f4171409596f75b27402f7a6bae7c180844012
        checksum/config-sshd: c138a57396dc8b64344937e41e6b03b55727e9e826434fe5467cb5b456aab2b2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: shell-config
              mountPath: /config
              readOnly: true
            - name: shell-init-secrets
              mountPath: /init-config
              readOnly: true
            - name: shell-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: gitlab-shell
                    release: gitlab
      containers:
        - name: gitlab-shell
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-shell:v13.18.0"
          ports:
            - containerPort: 2222
              name: ssh
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/etc/gitlab-shell"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab-shell"
            - name: KEYS_DIRECTORY
              value: "/etc/gitlab-secrets/ssh"
          volumeMounts:
            - name: shell-config
              mountPath: "/etc/gitlab-shell"
            - name: shell-secrets
              mountPath: "/etc/gitlab-secrets"
              readOnly: true
            - name: sshd-config
              mountPath: /etc/ssh/sshd_config
              subPath: sshd_config
              readOnly: true
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /scripts/healthcheck
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2222
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          resources:
            requests:
              cpu: 0
              memory: 6M
      volumes:
        - name: shell-config
          configMap:
            name: gitlab-gitlab-shell
        - name: sshd-config
          configMap:
            name: gitlab-gitlab-shell-sshd
        - name: shell-init-secrets
          projected:
            defaultMode: 0440
            sources:
              - secret:
                  name: "gitlab-gitlab-shell-host-keys"
              - secret:
                  name: "gitlab-gitlab-shell-secret"
                  items:
                    - key: "secret"
                      path: shell/.gitlab_shell_secret
        # Actual config dirs that will be used in the container
        - name: shell-secrets
          emptyDir:
            medium: "Memory"
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: services
  labels:
    app: sidekiq
    chart: sidekiq-4.11.4
    release: gitlab
    queue-pod-name: all-in-1
  annotations: {}
spec:
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      queue-pod-name: all-in-1
  template:
    metadata:
      labels:
        app: sidekiq
        chart: sidekiq-4.11.4
        release: gitlab
        queue-pod-name: all-in-1
      annotations:
        checksum/configmap: 491f6739b0faff8baa58eae3af6220bc389033bbfe71ff803b345cd71bcf191b
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        checksum/configmap-pod: e67f41d4a9887254b4b5be5536cad9262d1acd8067be5803fab4b6d86b97866c
        gitlab.com/prometheus_port: "3807"
        gitlab.com/prometheus_scrape: "true"
        prometheus.io/port: "3807"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: sidekiq
                    release: gitlab
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: sidekiq-config
              mountPath: /config
              readOnly: true
            - name: init-sidekiq-secrets
              mountPath: /init-config
              readOnly: true
            - name: sidekiq-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce:v13.12.0"
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "5"
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
            - name: sidekiq-config
              mountPath: "/var/opt/gitlab/templates"
              readOnly: true
            - name: sidekiq-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: sidekiq-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m
      containers:
        - name: sidekiq
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce:v13.12.0"
          env:
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
            - name: SIDEKIQ_CLUSTER
              value: "true"
            - name: SIDEKIQ_QUEUE_SELECTOR
              value: ""
            - name: SIDEKIQ_EXPERIMENTAL_QUEUE_SELECTOR
              value: ""
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "5"
            - name: SIDEKIQ_QUEUES
              value:
            - name: SIDEKIQ_NEGATE_QUEUES
              value:
            - name: SIDEKIQ_DAEMON_MEMORY_KILLER
              value: "1"
            - name: SIDEKIQ_MEMORY_KILLER_CHECK_INTERVAL
              value: "3"
            - name: SIDEKIQ_MEMORY_KILLER_MAX_RSS
              value: "2000000"
            - name: SIDEKIQ_MEMORY_KILLER_GRACE_TIME
              value: "900"
            - name: SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT
              value: "30"
            - name: ENABLE_BOOTSNAP
              value: "1"
          ports:
            - containerPort: 3807
              name: metrics
          volumeMounts:
            - name: sidekiq-metrics
              mountPath: "/metrics"
            - name: sidekiq-config
              mountPath: "/var/opt/gitlab/templates"
              readOnly: true
            - name: sidekiq-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: sidekiq-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: sidekiq-config
              mountPath: "/srv/gitlab/config/initializers/smtp_settings.rb"
              subPath: smtp_settings.rb
            - name: sidekiq-config
              mountPath: "/srv/gitlab/INSTALLATION_TYPE"
              subPath: installation_type
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3807
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 3807
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
            requests:
              cpu: 900m
              memory: 2G
      volumes:
        - name: sidekiq-metrics
          emptyDir:
            medium: "Memory"
        - name: sidekiq-config
          projected:
            sources:
              - configMap:
                  name: gitlab-sidekiq
              - configMap:
                  name: gitlab-sidekiq-all-in-1
        - name: init-sidekiq-secrets
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  name: "gitlab-rails-secret"
                  items:
                    - key: secrets.yml
                      path: rails-secrets/secrets.yml
              - secret:
                  name: "gitlab-gitaly-secret"
                  items:
                    - key: "token"
                      path: gitaly/gitaly_token
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "redis-password"
                      path: redis/redis-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "psql-password"
                      path: postgres/psql-password
              - secret:
                  name: "gitlab-registry-secret"
                  items:
                    - key: registry-auth.key
                      path: registry/gitlab-registry.key
              - secret:
                  name: gitlab-secrets
                  items:
                    - key: minio-connection
                      path: objectstorage/object_store
        - name: sidekiq-secrets
          emptyDir:
            medium: "Memory"
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/task-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-task-runner
  namespace: services
  labels:
    app: task-runner
    chart: task-runner-4.11.4
    release: gitlab
  annotations: {}
spec:
  replicas: 1
  strategy:
    rollingUpdate: null
    type: Recreate
  selector:
    matchLabels:
      app: task-runner
      release: gitlab
  template:
    metadata:
      labels:
        app: task-runner
        chart: task-runner-4.11.4
        release: gitlab
      annotations:
        checksum/config: 2c562b7668f079b73efbb603cee16c9acca8b3ca53f696c633e88656b0cac997
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: task-runner-config
              mountPath: /config
              readOnly: true
            - name: init-task-runner-secrets
              mountPath: /init-config
              readOnly: true
            - name: task-runner-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: gitaly
                    release: gitlab
      containers:
        - name: task-runner
          args:
            - /bin/bash
            - -c
            - cp -v -r -L /etc/gitlab/.s3cfg $HOME/.s3cfg && while sleep 3600; do :; done # alpine sleep has no infinity
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-task-runner-ce:v13.11.4"
          env:
            - name: ARTIFACTS_BUCKET_NAME
              value: gitlab-artifacts
            - name: REGISTRY_BUCKET_NAME
              value: registry
            - name: LFS_BUCKET_NAME
              value: git-lfs
            - name: UPLOADS_BUCKET_NAME
              value: gitlab-uploads
            - name: PACKAGES_BUCKET_NAME
              value: gitlab-packages
            - name: EXTERNAL_DIFFS_BUCKET_NAME
              value: gitlab-mr-diffs
            - name: TERRAFORM_STATE_BUCKET_NAME
              value: gitlab-terraform-state
            - name: BACKUP_BUCKET_NAME
              value: gitlab-backups
            - name: BACKUP_BACKEND
              value: s3
            - name: TMP_BUCKET_NAME
              value: gitlab-tmp
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
          volumeMounts:
            - name: task-runner-config
              mountPath: "/var/opt/gitlab/templates"
            - name: task-runner-config
              mountPath: "/srv/gitlab/config/initializers/smtp_settings.rb"
              subPath: smtp_settings.rb
            - name: task-runner-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: task-runner-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: task-runner-tmp
              mountPath: "/srv/gitlab/tmp"
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 350M
      volumes:
        - name: task-runner-config
          projected:
            sources:
              - configMap:
                  name: gitlab-task-runner
        - name: task-runner-tmp
          emptyDir: {}
        - name: init-task-runner-secrets
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  name: "gitlab-rails-secret"
                  items:
                    - key: secrets.yml
                      path: rails-secrets/secrets.yml
              - secret:
                  name: "gitlab-gitlab-shell-secret"
                  items:
                    - key: "secret"
                      path: shell/.gitlab_shell_secret
              - secret:
                  name: "gitlab-gitaly-secret"
                  items:
                    - key: "token"
                      path: gitaly/gitaly_token
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "redis-password"
                      path: redis/redis-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "psql-password"
                      path: postgres/psql-password
              - secret:
                  name: "gitlab-registry-secret"
                  items:
                    - key: registry-auth.key
                      path: registry/gitlab-registry.key
              - secret:
                  name: gitlab-secrets
                  items:
                    - key: minio-connection
                      path: objectstorage/object_store
        - name: task-runner-secrets
          emptyDir:
            medium: "Memory"

        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-webservice-default
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
    gitlab.com/webservice-name: default
  annotations: {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      gitlab.com/webservice-name: default
  template:
    metadata:
      labels:
        app: webservice
        chart: webservice-4.11.4
        release: gitlab
        gitlab.com/webservice-name: default
      annotations:
        checksum/config: 2207a6989e1c48ac757b41fa486daa84ef947bf932b62735c4e70d8aee457614
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_path: /-/metrics
        gitlab.com/prometheus_port: "8080"
        gitlab.com/prometheus_scrape: "true"
        prometheus.io/path: /-/metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: webservice
                    release: gitlab
                    gitlab.com/webservice-name: default
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh"]
          args:
            [
              "-c",
              "sh -x /config-webservice/configure ; sh -x /config-workhorse/configure ; mkdir -p -m 3770 /tmp/gitlab",
            ]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: webservice-config
              mountPath: /config-webservice
              readOnly: true
            - name: workhorse-config
              mountPath: /config-workhorse
              readOnly: true
            - name: init-webservice-secrets
              mountPath: /init-config
              readOnly: true
            - name: webservice-secrets
              mountPath: /init-secrets
              readOnly: false
            - name: workhorse-secrets
              mountPath: /init-secrets-workhorse
              readOnly: false
            - name: shared-tmp
              mountPath: /tmp
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce:v13.11.4
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
            - name: webservice-config
              mountPath: "/var/opt/gitlab/templates"
            - name: webservice-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m
      containers:
        - name: webservice
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce:v13.11.4
          ports:
            - containerPort: 8080
              name: webservice
          env:
            - name: GITLAB_WEBSERVER
              value: puma
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: WORKER_PROCESSES
              value: "2"
            - name: WORKER_TIMEOUT
              value: "60"
            - name: INTERNAL_PORT
              value: "8080"
            - name: PUMA_THREADS_MIN
              value: "4"
            - name: PUMA_THREADS_MAX
              value: "4"
            - name: PUMA_WORKER_MAX_MEMORY
              value: "1024"
            - name: DISABLE_PUMA_WORKER_KILLER
              value: "false"
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            - name: GITLAB_TRACING_URL
              value: ""
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "true"
          volumeMounts:
            - name: webservice-metrics
              mountPath: "/metrics"
            - name: webservice-config
              mountPath: "/var/opt/gitlab/templates"
            - name: webservice-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: webservice-config
              mountPath: "/srv/gitlab/config/initializers/smtp_settings.rb"
              subPath: smtp_settings.rb
            - name: webservice-config
              mountPath: "/srv/gitlab/INSTALLATION_TYPE"
              subPath: installation_type
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: "/tmp"
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            httpGet:
              path: /-/liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -SIGINT -o ruby"]
          resources:
            requests:
              cpu: 300m
              memory: 2.5G
        - name: gitlab-workhorse
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce:v13.11.4"
          ports:
            - containerPort: 8181
              name: workhorse
          env:
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: ""
            - name: GITLAB_WORKHORSE_LISTEN_PORT
              value: "8181"
            - name: GITLAB_WORKHORSE_LOG_FORMAT
              value: "json"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
          volumeMounts:
            - name: workhorse-config
              mountPath: "/var/opt/gitlab/templates"
            - name: workhorse-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: "/tmp"
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /scripts/healthcheck
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 100M
      volumes:
        - name: shared-tmp
          emptyDir: {}
        - name: webservice-metrics
          emptyDir:
            medium: "Memory"
        - name: webservice-config
          configMap:
            name: gitlab-webservice
        - name: workhorse-config
          configMap:
            name: gitlab-workhorse-config
        - name: init-webservice-secrets
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  name: "gitlab-rails-secret"
                  items:
                    - key: secrets.yml
                      path: rails-secrets/secrets.yml
              - secret:
                  name: "gitlab-gitlab-shell-secret"
                  items:
                    - key: "secret"
                      path: shell/.gitlab_shell_secret
              - secret:
                  name: "gitlab-gitaly-secret"
                  items:
                    - key: "token"
                      path: gitaly/gitaly_token
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "redis-password"
                      path: redis/redis-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "psql-password"
                      path: postgres/psql-password
              - secret:
                  name: "gitlab-registry-secret"
                  items:
                    - key: registry-auth.key
                      path: registry/gitlab-registry.key
              - secret:
                  name: "gitlab-gitlab-workhorse-secret"
                  items:
                    - key: "shared_secret"
                      path: gitlab-workhorse/secret
              - secret:
                  name: gitlab-secrets
                  items:
                    - key: minio-connection
                      path: objectstorage/object_store
        - name: webservice-secrets
          emptyDir:
            medium: "Memory"
        - name: workhorse-secrets
          emptyDir:
            medium: "Memory"
        - name: shared-upload-directory
          emptyDir: {}
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-gitlab-shell
  namespace: services
  labels:
    app: gitlab-shell
    chart: gitlab-shell-4.11.4
    release: gitlab
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-gitlab-shell
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageValue: 100m
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: services
  labels:
    app: sidekiq
    chart: sidekiq-4.11.4
    release: gitlab
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-sidekiq-all-in-1-v1
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageValue: 350m
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-webservice-default
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
    gitlab.com/webservice-name: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-webservice-default
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageValue: 1
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/statefulset.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-gitaly
  namespace: services
  labels:
    app: gitaly
    chart: gitaly-4.11.4
    release: gitlab
spec:
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
  serviceName: gitlab-gitaly
  replicas: 1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gitaly
        chart: gitaly-4.11.4
        release: gitlab
      annotations:
        checksum/config: de8fabe2d108ac0d622786693aa82a3547d11413311127f6da619dda59ab463c
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9236"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9236"
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: gitaly-config
              mountPath: /config
              readOnly: true
            - name: init-gitaly-secrets
              mountPath: /init-config
              readOnly: true
            - name: gitaly-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: gitaly
                    release: gitlab
      containers:
        - name: gitaly
          image: "registry.gitlab.com/gitlab-org/build/cng/gitaly:v13.12.0"
          ports:
            - containerPort: 8075
            - containerPort: 9236
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/etc/gitaly/templates"
            - name: CONFIG_DIRECTORY
              value: "/etc/gitaly"
            - name: GITALY_CONFIG_FILE
              value: "/etc/gitaly/config.toml"
            - name: SSL_CERT_DIR
              value: "/etc/ssl/certs"
            - name: GITALY_PROMETHEUS_LISTEN_ADDR
              value: ":9236"
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: gitaly-config
              mountPath: "/etc/gitaly/templates"
            - name: gitaly-secrets
              mountPath: "/etc/gitlab-secrets"
              readOnly: true
            - name: repo-data
              mountPath: "/home/git/repositories"
          livenessProbe:
            exec:
              command:
                - /scripts/healthcheck
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /scripts/healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      volumes:
        - name: gitaly-config
          configMap:
            name: gitlab-gitaly
        - name: gitaly-secrets
          emptyDir:
            medium: "Memory"
        - name: init-gitaly-secrets
          projected:
            defaultMode: 0440
            sources:
              - secret:
                  name: "gitlab-gitaly-secret"
                  items:
                    - key: "token"
                      path: "gitaly_token"
              - secret:
                  name: "gitlab-gitlab-shell-secret"
                  items:
                    - key: "secret"
                      path: ".gitlab_shell_secret"
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
        - name: repo-data
          persistentVolumeClaim:
            claimName: nfs-pvc-gitlab
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-migrations-1
  namespace: services
  labels:
    app: migrations
    chart: migrations-4.11.4
    release: gitlab
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: migrations
        chart: migrations-4.11.4
        release: gitlab
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2"
          env: []
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ["sh", "/config/configure"]
          image: "busybox:latest"
          env: []
          volumeMounts:
            - name: migrations-config
              mountPath: /config
              readOnly: true
            - name: init-migrations-secrets
              mountPath: /init-config
              readOnly: true
            - name: migrations-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      restartPolicy: OnFailure
      containers:
        - name: migrations
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-task-runner-ce:v13.11.4"
          args:
            - /scripts/wait-for-deps
            - /scripts/db-migrate
          env:
            - name: GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "gitlab-secrets"
                  key: runner-registration-token
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: "/var/opt/gitlab/templates"
            - name: CONFIG_DIRECTORY
              value: "/srv/gitlab/config"
            - name: BYPASS_SCHEMA_VERSION
              value: "true"
            - name: ENABLE_BOOTSNAP
              value: "1"
          volumeMounts:
            - name: migrations-config
              mountPath: "/var/opt/gitlab/templates"
            - name: migrations-secrets
              mountPath: "/etc/gitlab"
              readOnly: true
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/initial_root_password
              subPath: migrations/initial_root_password
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 200Mi
      volumes:
        - name: migrations-config
          configMap:
            name: gitlab-migrations
        - name: init-migrations-secrets
          projected:
            defaultMode: 0400
            sources:
              - secret:
                  name: "gitlab-rails-secret"
                  items:
                    - key: secrets.yml
                      path: rails-secrets/secrets.yml
              - secret:
                  name: "gitlab-gitaly-secret"
                  items:
                    - key: "token"
                      path: gitaly/gitaly_token
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "redis-password"
                      path: redis/redis-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "psql-password"
                      path: postgres/psql-password
              - secret:
                  name: "gitlab-secrets"
                  items:
                    - key: "initial-root-password"
                      path: migrations/initial_root_password
        - name: migrations-secrets
          emptyDir:
            medium: "Memory"
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitlab-webservice-default
  namespace: services
  labels:
    app: webservice
    chart: webservice-4.11.4
    release: gitlab
    gitlab.com/webservice-name: default
  annotations:
    kubernetes.io/ingress.class: "traefik"
    kubernetes.io/ingress.allow-http: "false"
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: services-gitlab-buffer@kubernetescrd,kube-system-traefik-errors@kubernetescrd
    external-dns.alpha.kubernetes.io/hostname: gitlab.technolab.cloud
    external-dns.alpha.kubernetes.io/target: technolab.cloud
    # external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
spec:
  rules:
    - host: gitlab.technolab.cloud
      http:
        paths:
          - path: /
            backend:
              serviceName: gitlab-webservice-default
              servicePort: 8181
          - path: /admin/sidekiq/
            backend:
              serviceName: gitlab-webservice-default
              servicePort: 8080
  tls:
    - hosts:
        - gitlab.technolab.cloud
      secretName: services-technolab-cloudflare-org-tls
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-shared-secrets
  namespace: services
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: gitlab/charts/shared-secrets/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-shared-secrets
  namespace: services
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  generate-secrets: |
    namespace=services
    release=gitlab
    env=production

    pushd $(mktemp -d)

    # Args pattern, length
    function gen_random(){
      head -c 4096 /dev/urandom | LC_CTYPE=C tr -cd $1 | head -c $2
    }

    # Args: yaml file, search path
    function fetch_rails_value(){
      local value=$(yq read $1 "${2}")
      # Don't return null values
      if [ "${value}" != "null" ]; then echo "${value}"; fi
    }

    # Args: secretname
    function label_secret(){
      local secret_name=$1
    # Remove application labels if they exist
      kubectl --namespace=$namespace label \
        secret $secret_name $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')

      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name app=shared-secrets chart=shared-secrets-0.1.0 release=gitlab heritage=Helm
    }

    # Args: secretname, args
    function generate_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1

      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists."

        for arg in "${secret_args[@]}"; do
          local from=$(echo -n ${arg} | cut -d '=' -f1)

          if [ -z "${from##*literal*}" ]; then
            local key=$(echo -n ${arg} | cut -d '=' -f2)
            local desiredValue=$(echo -n ${arg} | cut -d '=' -f3-)
            local flags="--namespace=$namespace --allow-missing-template-keys=false"

            if ! $(kubectl $flags get secret $secret_name -ojsonpath="{.data.${key}}" > /dev/null 2>&1); then
              echo "key \"${key}\" does not exist. patching it in."

              if [ "${desiredValue}" != "" ]; then
                desiredValue=$(echo -n "${desiredValue}" | base64 -w 0)
              fi

              kubectl --namespace=$namespace patch secret ${secret_name} -p "{\"data\":{\"$key\":\"${desiredValue}\"}}"
            fi
          fi
        done
      fi

      label_secret $secret_name
    }

    # Initial root password
    generate_secret_if_needed "gitlab-secrets" --from-literal="initial-root-password"=$(gen_random 'a-zA-Z0-9' 64)

    # Gitlab shell
    generate_secret_if_needed "gitlab-gitlab-shell-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)

    # Gitaly secret
    generate_secret_if_needed "gitlab-gitaly-secret" --from-literal="token"=$(gen_random 'a-zA-Z0-9' 64)

    # Gitlab runner secret
    generate_secret_if_needed "gitlab-secrets" --from-literal=runner-registration-token=$(gen_random 'a-zA-Z0-9' 64) --from-literal=runner-token=""

    # GitLab Pages API secret

    # GitLab Pages auth secret for hashing cookie store when using access control

    # GitLab Pages OAuth secret

    # Registry certificates
    mkdir -p certs
    openssl req -new -newkey rsa:4096 -subj "/CN=gitlab-issuer" -nodes -x509 -keyout certs/registry-example-com.key -out certs/registry-example-com.crt -days 3650
    generate_secret_if_needed "gitlab-registry-secret" --from-file=registry-auth.key=certs/registry-example-com.key --from-file=registry-auth.crt=certs/registry-example-com.crt

    # config/secrets.yaml
    if [ -n "$env" ]; then
      rails_secret="gitlab-rails-secret"

      # Fetch the values from the existing secret if it exists
      if $(kubectl --namespace=$namespace get secret $rails_secret > /dev/null 2>&1); then
        kubectl --namespace=$namespace get secret $rails_secret -o jsonpath="{.data.secrets\.yml}" | base64 --decode > secrets.yml
        secret_key_base=$(fetch_rails_value secrets.yml "${env}.secret_key_base")
        otp_key_base=$(fetch_rails_value secrets.yml "${env}.otp_key_base")
        db_key_base=$(fetch_rails_value secrets.yml "${env}.db_key_base")
        openid_connect_signing_key=$(fetch_rails_value secrets.yml "${env}.openid_connect_signing_key")
        ci_jwt_signing_key=$(fetch_rails_value secrets.yml "${env}.ci_jwt_signing_key")
        encrypted_settings_key_base=$(fetch_rails_value secrets.yml "${env}.encrypted_settings_key_base")
      fi;

      # Generate defaults for any unset secrets
      secret_key_base="${secret_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      otp_key_base="${otp_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      db_key_base="${db_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      openid_connect_signing_key="${openid_connect_signing_key:-$(openssl genrsa 2048)}"
      ci_jwt_signing_key="${ci_jwt_signing_key:-$(openssl genrsa 2048)}"
      encrypted_settings_key_base="${encrypted_settings_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)

      # Update the existing secret
      cat << EOF > rails-secrets.yml
    apiVersion: v1
    kind: Secret
    metadata:
      name: $rails_secret
    type: Opaque
    stringData:
      secrets.yml: |-
        $env:
          secret_key_base: $secret_key_base
          otp_key_base: $otp_key_base
          db_key_base: $db_key_base
          encrypted_settings_key_base: $encrypted_settings_key_base
          openid_connect_signing_key: |
    $(echo "${openid_connect_signing_key}" | awk '{print "        " $0}')
          ci_jwt_signing_key: |
    $(echo "${ci_jwt_signing_key}" | awk '{print "        " $0}')
    EOF
      kubectl --validate=false --namespace=$namespace apply -f rails-secrets.yml
      label_secret $rails_secret
    fi

    # Shell ssh host keys
    ssh-keygen -A
    mkdir -p host_keys
    cp /etc/ssh/ssh_host_* host_keys/
    generate_secret_if_needed "gitlab-gitlab-shell-host-keys" --from-file host_keys

    # Gitlab-workhorse secret
    generate_secret_if_needed "gitlab-gitlab-workhorse-secret" --from-literal="shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)

    # Registry http.secret secret
    generate_secret_if_needed "gitlab-registry-httpsecret" --from-literal="secret"=$(gen_random 'a-z0-9' 128 | base64 -w 0)

    # Container Registry notification_secret
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: services
  labels:
    app: gitlab
    chart: gitlab-4.11.4
    release: gitlab
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-11"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  runcheck: |
    #!/bin/sh

    set -e

    notify() {
      echo "$1"
      echo -n "$1 " >> /dev/termination-log
    }

    greater_version()
    {
      test "$(printf '%s\n' "$@" | sort -V | tail -n 1)" = "$1";
    }

    # For the PostgreSQL upgrade, you either need both secrets, or no secrets.
    # If there are no secrets, we will create them for you.
    # If the secrets aren't in either of these states, we assume you are upgrading from an older version
    # This is running ahead of version checks to ensure this always runs. This is to account for
    # installations outside of the official helm repo.
    secrets_dir="/etc/secrets/postgresql"
    if [ -d "${secrets_dir}" ]; then
      if [ ! "$(ls -A ${secrets_dir}/..data/)" = "" ]; then
        if [ ! -f "${secrets_dir}/postgresql-postgres-password" ] || [ ! -f "${secrets_dir}/psql-password" ]; then
          notify "You seem to be upgrading from a previous version of GitLab using the bundled PostgreSQL chart"
          notify "There are some manual steps which need to be performed in order to upgrade the database"
          notify "Please see the upgrade documentation for instructions on how to proceed:"
          notify "https://docs.gitlab.com/charts/installation/upgrade.html"
          exit 1
        fi
      fi
    fi
    MIN_VERSION=13.0
    CHART_MIN_VERSION=4.0

    # Only run check for semver releases
    if ! awk 'BEGIN{exit(!(ARGV[1] ~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/))}' "$GITLAB_VERSION"; then
      exit 0
    fi

    NEW_MAJOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1}')
    NEW_MINOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1"."$2}')

    NEW_CHART_MAJOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1}')
    NEW_CHART_MINOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1"."$2}')

    if [ ! -f /chart-info/gitlabVersion ]; then
      notify "It seems you are attempting an unsupported upgrade path."
      notify "Please follow the upgrade documentation at https://docs.gitlab.com/ee/update/README.html#upgrade-paths"
      exit 1
    fi

    OLD_VERSION_STRING=$(cat /chart-info/gitlabVersion)
    OLD_CHART_VERSION_STRING=$(cat /chart-info/gitlabChartVersion)

    # Skip check if old version wasn't semver
    if ! awk 'BEGIN{exit(!(ARGV[1] ~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/))}' "$OLD_VERSION_STRING"; then
      exit 0
    fi

    OLD_MAJOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1}')
    OLD_MINOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1"."$2}')
    OLD_CHART_MAJOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1}')
    OLD_CHART_MINOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1"."$2}')

    # Checking Version
    # (i) if it is a major version jump
    # (ii) if existing version is less than required minimum version
    if [ ${OLD_MAJOR_VERSION} -lt ${NEW_MAJOR_VERSION} ] || [ ${OLD_CHART_MAJOR_VERSION} -lt ${NEW_CHART_MAJOR_VERSION} ]; then
      if ( ! greater_version $OLD_MINOR_VERSION $MIN_VERSION ) || ( ! greater_version $OLD_CHART_MINOR_VERSION $CHART_MIN_VERSION ); then
        notify "It seems you are upgrading the GitLab Helm Chart from ${OLD_CHART_VERSION_STRING} (GitLab ${OLD_VERSION_STRING}) to ${CHART_VERSION} (GitLab ${GITLAB_VERSION})."
        notify "It is required to upgrade to the latest ${CHART_MIN_VERSION}.x version first before proceeding."
        notify "Please follow the upgrade documentation at https://docs.gitlab.com/charts/releases/4_0.html"
        notify "and upgrade to GitLab Helm Chart version ${CHART_MIN_VERSION}.x before upgrading to ${CHART_VERSION}."
        exit 1
      fi
    fi
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-shared-secrets
  namespace: services
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "patch"]
---
# Source: gitlab/charts/shared-secrets/templates/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-shared-secrets
  namespace: services
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-shared-secrets
subjects:
  - kind: ServiceAccount
    name: gitlab-shared-secrets
    namespace: services
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/test-runner.yaml
apiVersion: v1
kind: Pod
metadata:
  name: gitlab-webservice-test-runner-inry9
  namespace: services
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  containers:
    - name: test-runner
      image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce:v13.11.4
      command: ["sh", "/tests/test_login"]
      volumeMounts:
        - name: tests
          mountPath: "/tests"
        - name: root-password
          readOnly: true
          mountPath: /initial_root_password
          subPath: initial_root_password
  volumes:
    - name: tests
      configMap:
        name: gitlab-webservice-tests
    - name: root-password
      secret:
        secretName: "gitlab-secrets"
        items:
          - key: "initial-root-password"
            path: initial_root_password
  restartPolicy: Never
---
# Source: gitlab/charts/shared-secrets/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets-1-7gk
  namespace: services
  labels:
    app: shared-secrets
    chart: shared-secrets-0.1.0
    release: gitlab
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: shared-secrets
        release: gitlab
      annotations: {}
    spec:
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      containers:
        - name: shared-secrets
          image: "registry.gitlab.com/gitlab-org/build/cng/kubectl:1.14.10"
          command: ["/bin/bash", "/scripts/generate-secrets"]
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: ssh
              mountPath: /etc/ssh
          resources:
            requests:
              cpu: 50m
      volumes:
        - name: scripts
          configMap:
            name: gitlab-shared-secrets
        - name: ssh
          emptyDir: {}
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: services
  labels:
    app: gitlab
    chart: gitlab-4.11.4
    release: gitlab
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: gitlab
        release: gitlab
    spec:
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      restartPolicy: Never
      containers:
        - name: run-check
          image: "busybox:latest"
          command: ["/bin/sh", "/scripts/runcheck"]
          env:
            - name: GITLAB_VERSION
              value: "13.11.4"
            - name: CHART_VERSION
              value: "4.11.4"
          volumeMounts:
            - name: chart-info
              mountPath: /chart-info
            - name: scripts
              mountPath: /scripts
          resources:
            requests:
              cpu: 50m
      volumes:
        - name: chart-info
          configMap:
            name: gitlab-gitlab-chart-info
            optional: true
        - name: scripts
          configMap:
            name: gitlab-gitlab-upgrade-check
